# -*- coding: utf-8 -*-
"""MiniMap.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zvMiUgMsk0qOt6nz5YntHCq6qd9lHJKv
"""

pip install openrouteservice folium geocoder numpy networkx geopy osmnx



# @title #**MiniMap** (S-Average LIVE TRAFFIC + WEATHER STREET MAP)

# Copyright (c) 2025 Aditya
# This project is shared for review purposes only.
# Unauthorized use, reproduction, or distribution is prohibited.

import openrouteservice
import folium
import time
import numpy as np
import networkx as nx
from folium.plugins import HeatMap, AntPath
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderTimedOut
import requests
from weather_model import

import warnings
warnings.filterwarnings("ignore", category=UserWarning)

# API Keys
ORS_API_KEY = '5b3ce3597851110001cf624803070ef73fab46049a4367a57979c831'
TOMTOM_API_KEY = '0fM22Oq3R6sYGfNAJ660S18EqgiIMSjo'
OPENWEATHER_API_KEY = '08208abad73b45982006305407922e0f'

# Initialize OpenRouteService client
client = openrouteservice.Client(key=ORS_API_KEY)
geolocator = Nominatim(user_agent="city_locator")

# Function to fetch real-time traffic data from TomTom
def get_tomtom_traffic(lat, lon):
    url = f"https://api.tomtom.com/traffic/services/4/flowSegmentData/absolute/10/json?key={TOMTOM_API_KEY}&point={lat},{lon}"
    response = requests.get(url)
    data = response.json()
    if response.status_code == 200 and "flowSegmentData" in data:
        current_speed = data["flowSegmentData"]["currentSpeed"]
        free_flow_speed = data["flowSegmentData"]["freeFlowSpeed"]
        congestion = current_speed / free_flow_speed < 0.7  # If speed drops below 70%, mark as congested
        return congestion
    return False

# Function to fetch weather data
def get_weather(lat, lon):
    url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}&units=metric"
    response = requests.get(url)
    data = response.json()

    if response.status_code == 200:
        weather_desc = data["weather"][0]["description"]
        temperature = data["main"]["temp"]
        humidity = data["main"]["humidity"]
        wind_speed = data["wind"]["speed"]
        # Cloud Cover

        # Get predicted condition
        weather_condition = predict_condition(temperature, humidity, wind_speed)
        print(f"Predicted Weather Condition: {weather_condition} and cloudy")

        return weather_desc, temperature, humidity, wind_speed
    return "Unknown", "N/A", "N/A", "N/A","N/A"

# Get user-selected city coordinates
def get_user_city_input(prompt="Enter a city or address: "):
    while True:
        city_name = input(prompt)
        try:
            locations = list(geolocator.geocode(city_name, exactly_one=False, timeout=10))
            if not locations:
                print("❌ No matching location found. Try again.")
                continue

            print("\n🔍 Multiple locations found. Select the correct one:")
            for i, loc in enumerate(locations[:7]):
                print(f"{i+1}. {loc.address}")

            choice = input("Enter the correct number (1-5) or type 'retry': ")
            if choice.lower() == 'retry':
                continue

            choice_index = int(choice) - 1
            if 0 <= choice_index < len(locations):
                selected_location = locations[choice_index]
                return selected_location.latitude, selected_location.longitude
            else:
                print("Invalid choice. Try again.")
        except (GeocoderTimedOut, ValueError):
            print("Error in geolocation. Try again.")
        time.sleep(1)

# Function to get an optimized route
def get_optimized_route(start_lat, start_lon, end_lat, end_lon):
    start_coords = (start_lon, start_lat)
    end_coords = (end_lon, end_lat)

    try:
        routes = client.directions(
            coordinates=[start_coords, end_coords],
            profile='driving-car',
            format='geojson'
        )
    except openrouteservice.exceptions.ApiError as e:
        print(f"⚠️ Route generation failed: {e}")
        return None, None

    if routes and 'features' in routes and len(routes['features']) > 0:
        route_map = folium.Map(location=[start_lat, start_lon], zoom_start=14, tiles="OpenStreetMap")
        route_coords = routes['features'][0]['geometry']['coordinates']
        lat_lng_route = [(lat, lon) for lon, lat in route_coords]

        # Draw path with traffic awareness
        for i in range(len(lat_lng_route) - 1):
            lat, lon = lat_lng_route[i]
            next_lat, next_lon = lat_lng_route[i + 1]
            color = "red" if get_tomtom_traffic(lat, lon) else "blue"
            folium.PolyLine(locations=[(lat, lon), (next_lat, next_lon)], color=color, weight=5, opacity=0.8).add_to(route_map)

        # Add weather checkpoints for every 25% of the route
        checkpoint_intervals = np.linspace(0, len(lat_lng_route) - 1, 4, dtype=int)
        for idx in checkpoint_intervals:
            lat, lon = lat_lng_route[idx]
            description, temperature, humidity, wind_speed = get_weather(lat, lon)
            popup_text = f"Weather: {description}\nTemp: {temperature}°C\nHumidity: {humidity}%\nWind Speed: {wind_speed} m/s"
            folium.Marker([lat, lon], popup=popup_text, icon=folium.Icon(color='blue')).add_to(route_map)

        AntPath(locations=lat_lng_route, color="blue", weight=4, delay=800).add_to(route_map)

        folium.Marker([start_lat, start_lon], popup="Start", icon=folium.Icon(color='green')).add_to(route_map)
        folium.Marker([end_lat, end_lon], popup="Destination", icon=folium.Icon(color='red')).add_to(route_map)

        return route_map, route_coords
    else:
        print("No valid route found.")
        return None, None

# Main function
def main():
    print("Welcome to MiniMap")

    start_lat, start_lon = get_user_city_input("Enter starting address: ")
    end_lat, end_lon = get_user_city_input("Enter destination address: ")

    route_map, route_coords = get_optimized_route(start_lat, start_lon, end_lat, end_lon)

    if route_map:
        route_map.save("route_map.html")
        print("Route saved as 'route_map.html'. Open in a browser to view.")

if __name__ == "__main__":
    main()

